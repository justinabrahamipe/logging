generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Activity {
    id         Int      @id @default(autoincrement())
    icon       String   @default("--")
    title      String   @unique
    category   String
    color      String?
    created_on DateTime @default(now())
}

model Log {
    id               Int       @id @default(autoincrement())
    comment          String?
    activityTitle    String
    activityCategory String
    activityIcon     String
    activityColor    String?
    start_time       DateTime?
    end_time         DateTime?
    created_on       DateTime  @default(now())
    time_spent       Int?
    tags             String?
    goalId           Int?
    goalCount        Int?      // For count-based goals (e.g., pages read)
}

model Todo {
    id               Int      @id @default(autoincrement())
    title            String
    description      String?
    activityTitle    String?
    activityCategory String?
    deadline         String?
    work_date        String?
    done             Boolean  @default(false)
    importance       Int      @default(1)
    urgency          Int      @default(1)
    created_on       DateTime @default(now())
}

model Goal {
    id                 Int      @id @default(autoincrement())
    title              String
    description        String?
    goalType           String   // "limiting" or "achievement"
    metricType         String   // "time" or "count"
    targetValue        Float    // Target hours or count
    currentValue       Float    @default(0)
    periodType         String   // "week", "month", "3months", "6months", "year", "custom"
    startDate          DateTime
    endDate            DateTime
    activityTitle      String?  // Optional: link to specific activity
    activityCategory   String?
    color              String?
    icon               String?
    created_on         DateTime @default(now())
    isActive           Boolean  @default(true)
    isRecurring        Boolean  @default(false)
    recurrencePattern  String?  // "daily", "weekly", "work-weekly", "custom-weekly", "monthly", "custom-monthly", "quarterly", "yearly"
    recurrenceConfig   String?  // JSON string for custom config: {"daysOfWeek": [1,3,5]} or {"dayOfMonth": 15}
    parentGoalId       Int?     // Link to parent goal if this is a recurring instance
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    preferences   UserPreferences?
    accounts      Account[]
    sessions      Session[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserPreferences {
    id         Int      @id @default(autoincrement())
    userId     String   @unique
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    theme      String   @default("light") // "light" or "dark" or "system"
    timeFormat String   @default("12h")   // "12h" or "24h"
    dateFormat String   @default("DD/MM/YYYY") // "DD/MM/YYYY", "MM/DD/YYYY", etc.
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Contact {
    id             Int      @id @default(autoincrement())
    userId         String
    googleId       String?  // Google contact resource name
    name           String
    email          String?
    phoneNumber    String?
    photoUrl       String?
    organization   String?
    jobTitle       String?
    notes          String?
    lastSynced     DateTime @default(now())
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    @@unique([userId, googleId])
    @@index([userId])
}
